// Code generated by MockGen. DO NOT EDIT.
// Source: users.go

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"
	model "user-service/src/util/repository/model"
	users "user-service/src/util/repository/model/users"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockuserDto is a mock of userDto interface.
type MockuserDto struct {
	ctrl     *gomock.Controller
	recorder *MockuserDtoMockRecorder
}

// MockuserDtoMockRecorder is the mock recorder for MockuserDto.
type MockuserDtoMockRecorder struct {
	mock *MockuserDto
}

// NewMockuserDto creates a new mock instance.
func NewMockuserDto(ctrl *gomock.Controller) *MockuserDto {
	mock := &MockuserDto{ctrl: ctrl}
	mock.recorder = &MockuserDtoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserDto) EXPECT() *MockuserDtoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockuserDto) Get(bReq users.RequestUsers) (*model.BaseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", bReq)
	ret0, _ := ret[0].(*model.BaseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockuserDtoMockRecorder) Get(bReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockuserDto)(nil).Get), bReq)
}

// Login mocks base method.
func (m *MockuserDto) Login(bReq users.Users) (*users.LoginResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", bReq)
	ret0, _ := ret[0].(*users.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockuserDtoMockRecorder) Login(bReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockuserDto)(nil).Login), bReq)
}

// Register mocks base method.
func (m *MockuserDto) Register(bReq users.Users) (*uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", bReq)
	ret0, _ := ret[0].(*uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockuserDtoMockRecorder) Register(bReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockuserDto)(nil).Register), bReq)
}

// UpdateProfile mocks base method.
func (m *MockuserDto) UpdateProfile(id uuid.UUID, bReq users.Users) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", id, bReq)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockuserDtoMockRecorder) UpdateProfile(id, bReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockuserDto)(nil).UpdateProfile), id, bReq)
}
